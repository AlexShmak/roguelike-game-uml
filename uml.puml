@startuml Roguelike Game Architecture

package "Interface Layer" #EEEEFF {
  class UserInterface {
    +render(gameState: GameState)
    +showInventory(inventory: Inventory)
    +showStats(hp: Int, exp: Int, level: Int)
    +showGameOverScreen()
    +showPauseMenu()
  }
  
  class InputHandler {
    -keyBindings: Map<Key, CommandType>
    +handleKeyPress(key: Key): Command?
  }
}

package "Operation Layer" #FFEEEE {
  class GameController {
    -gameState: GameState
    +startGame()
    +processCommand(command: Command)
    +update()
  }
  
  class CharacterEventProcessor {
    +processAttack()
    +processMove()
    +processLevelProgression()
  }
  
  class GameState {
    -player: Player
    -mobs: List<Mob>
    -currentMap: GameMap
    +spawnMob(type: MobType, position: Position): Mob
    +changeMap(newMap: GameMap)
  }
  
  enum CommandType {
    MOVE
    ATTACK
    USE_ITEM
    EQUIP_ITEM
  }
}

package "Domain Layer" #EEFFEE {
  abstract class Character {
    -position: Pair<Int, Int>
    -stats: Stats
    -level: Int
    -experiencePoints: Int
    -attackPower: Int
    +move(direction: Direction)
    +attack(target: Character) 
    +receiveDamage(amount: Int)
    +gainExperience(amount: Int)
  }
  
  class Player {
    -inventory: Inventory
    +handleInput(command: Command): Boolean
    +equipItem(item: Item): Boolean
  }
  
  class Mob {
    +behavior: MobBehaviorStrategy
  }

  abstract class MobBaseDecorator {
    -mob: Mob
    +MobBaseDecorator(mob: Mob)
  }

  class ConfusedMobDecorator {
    +move(direction: Direction)
    +attack(target: Character)
  }

  interface MobBehaviorStrategy {
    +collapseAction()
    +attackAction()
  }

  class NeutralMobBehaviorStrategy {
  }

  class AggressiveMobBehaviorStrategy {
  }

  class PassiveMobBehaviorStrategy {
  }
  
  class Stats {
    -health: Int
    -attackPower: Int
    -defense: Int
    +applyEffect(effect: StatEffect)
  }
  
  class CombatSystem {
    +resolveAttack(attacker: Character, defender: Character)
  }
  
  class MovementSystem {
    +move(character: Character, direction: Direction)
    +resolveCollision(characterA: Character, characterB: Character)
  }
  
  class LevelSystem {
    +calculateExperienceForLevel(level: Int)
    +applyLevelUp(character: Character)
  }
  
  class GameMap {
    -tiles: Array<Array<Tile>>
  }

  class Tile {
    +isWalkable(): Boolean
  }
  
  class Inventory {
    -items: List<Item>
    -equippedItems: Map<EquipSlot, Item>
    +equipItem(item: Item, slot: EquipSlot): Boolean
    +getTotalBonuses(): Stats
  }

  enum EquipSlot {
    HEAD
    BODY
    ARMS
    LEGS
  }
  
  abstract class Item {
    +name: String
    +use()
  }
  
  class EquippableItem {
    +slot: EquipSlot
    +statBonuses: Stats
  }
  
  enum Direction {
    UP
    DOWN
    LEFT
    RIGHT
  }
}

package "Infrastructure Layer" #FFFFEE {
  class MapGenerator {
    +generate(width: Int, height: Int, level: Int): GameMap
  }
  
  class MapRepository {
    +loadFromFile(filePath: String): GameMap
  }
  
  class GameRepository {
    +saveGame(saveData: ProfileData): Boolean
    +loadGame(serializedProfileData: String): ProfileData
    +newGame(): ProfileData
  }

  class ProfileData {
    -playerData: Player
    -gameState: GameState
    +ProfileData(player: Player, gamestate: GameState)
    +serializeProfileData(): String
    +deserializeProfileData(data: String): ProfileData
  }
}

Character <|-- Player
Character <|-- Mob
Character --> Stats

Player --> Inventory

Inventory o--> Item
Inventory --> EquipSlot

Item <|-- EquippableItem

InputHandler --> CommandType

GameController --> GameState
GameController ..> CharacterEventProcessor: process event
GameController ..> UserInterface: render
GameController ..> GameRepository: uses
GameController --> InputHandler

CharacterEventProcessor ..> CombatSystem
CharacterEventProcessor ..> MovementSystem
CharacterEventProcessor ..> LevelSystem

GameState --> GameMap
GameState --> Player
GameState --> Mob

MovementSystem --> GameMap
MovementSystem --> Direction
MovementSystem --> Character
LevelSystem --> Character
CombatSystem --> Character

UserInterface --> GameState

GameMap ..> MapGenerator: created by
GameMap ..> MapRepository: loaded by
GameMap --> Tile

Mob --> MobBehaviorStrategy
MobBehaviorStrategy <|.. NeutralMobBehaviorStrategy
MobBehaviorStrategy <|.. AggressiveMobBehaviorStrategy
MobBehaviorStrategy <|.. PassiveMobBehaviorStrategy

Mob <|--* MobBaseDecorator
MobBaseDecorator <|-- ConfusedMobDecorator

GameRepository --> ProfileData

@enduml