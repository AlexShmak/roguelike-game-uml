@startuml Roguelike Game Architecture

package "Interface Layer" #EEEEFF {
  class UserInterface {
    +render(gameState: GameState)
    +showInventory(inventory: Inventory)
    +showStats(hp: Int, exp: Int, level: Int)
    +showGameOverScreen()
    +showPauseMenu()
  }
  
  class InputHandler {
    -keyBindings: Map<Key, CommandType>
    +handleKeyPress(key: Key): CommandType?
  }

  enum CommandType {
    MOVE
    ATTACK
    USE_ITEM
    EQUIP_ITEM
  }
}

package "Operation Layer" #FFEEEE {
  class GameController {
    -gameState: GameState
    +startGame()
    +processCommand(command: CommandType)
    +update()
  }
  
  class EntityEventProcessor {
    +processAttack()
    +processMove()
    +processLevelProgression()
  }
  
  class GameState {
    -player: Player
    -mobs: List<Mob>
    -currentMap: GameMap
    +spawnMob(type: MobType, position: Position): Mob
    +changeMap(newMap: GameMap)
  }
}

package "Domain Layer" #EEFFEE {
  abstract class Entity {
    -position: Pair<Int, Int>
    -stats: Stats
    -level: Int
    -experiencePoints: Int
    -attackPower: Int
    +move(direction: Direction)
    +attack(target: Entity) 
    +receiveDamage(amount: Int)
    +gainExperience(amount: Int)
    +clone()
  }
  
  class Player {
    -inventory: Inventory
    +equipItem(item: Item): Boolean
  }
  
  class Mob {
    +behavior: MobBehaviorStrategy
  }

  abstract class MobBaseDecorator {
    -mob: Mob
    +MobBaseDecorator(mob: Mob)
  }

  class ConfusedMobDecorator {
    +move(direction: Direction)
    +attack(target: Entity)
  }

  interface MobBehaviorStrategy {
    +collapseAction()
    +attackAction()
  }

  class NeutralMobBehaviorStrategy {
  }

  class AggressiveMobBehaviorStrategy {
  }

  class PassiveMobBehaviorStrategy {
  }
  
  class Stats {
    -health: Int
    -attackPower: Int
    -defense: Int
    +applyEffect(effect: StatEffect)
  }
  
  class CombatSystem {
    +resolveAttack(attacker: Entity, defender: Entity)
  }
  
  class MovementSystem {
    -gameMap: GameMap
    +move(character: Entity, direction: Direction)
    +resolveCollision(characterA: Entity, characterB: Entity)
  }
  
  class LevelSystem {
    -character: Entity
    -calculateExperienceForLevel(level: Int): Int
    -applyLevelUp()
    +addExp(exp: int)
  }
  
  class GameMap {
    -tiles: Array<Array<Tile>>
  }

  class Tile {
    +isWalkable(): Boolean
  }
  
  class Inventory {
    -items: List<Item>
    -equippedItems: Map<EquipSlot, Item>
    +equipItem(item: Item, slot: EquipSlot): Boolean
    +getTotalBonuses(): Stats
  }

  enum EquipSlot {
    HEAD
    BODY
    ARMS
    LEGS
    WEAPON
  }
  
  abstract class Item {
    +name: String
    +use()
    +clone()
  }
  
  class EquippableItem {
    +slot: EquipSlot
    +statBonuses: Stats
  }

  interface AbstractEquipmentFactory {
    +createHelmet(): EquippableItem
    +createBodyArmor(): EquippableItem
    +createLegsArmor(): EquippableItem
    +createArmsArmor(): EquippableItem
    +createWeapon(): EquippableItem
  }

  class DefaultEquipmentFactory {
  }

  class LegendaryEquipmentFactory {
  }

  class MysticEquipmentFactory {
  }
  
  enum Direction {
    UP
    DOWN
    LEFT
    RIGHT
  }

  interface AbstractMobFactory {
    +createArcher(): Mob
    +createWarrior(): Mob
    +createWizard(): Mob
  }

  class HotBiomMobFactory {
  }

  class ColdBiomMObFactory {
  }
}

package "Infrastructure Layer" #FFFFEE {
  class MapDirector {
    -mapBuilder: MapBuilder
    +MapDirector(mapBuilder)
    +makeDefaultMap()
    +makeBossMap()
  }

  interface MapBuilder {
    +reset()
    +addTreasures()
    +addDestructibleObstacles()
    +addLiquidObstacles()
    +generate(width: Int, height: Int, level: Int): GameMap
  }

  class DefaultMapBuilder {
  }

  class BossMapBuilder {
  } 

  class MapRepository {
    +loadFromFile(filePath: String): GameMap
  }
  
  class GameRepository {
    +saveGame(saveData: ProfileData): Boolean
    +loadGame(serializedProfileData: String): ProfileData
    +newGame(): ProfileData
  }

  class ProfileData {
    -playerData: Player
    -gameState: GameState
    +ProfileData(player: Player, gamestate: GameState)
    +serializeProfileData(): String
    +deserializeProfileData(data: String): ProfileData
  }
}

Entity <|-- Player
Entity <|-- Mob
Entity --> Stats

Player o--> Inventory

Inventory o--> Item
Inventory --> EquipSlot

Item <|-- EquippableItem

InputHandler --> CommandType

GameController o--> GameState
GameController ..> EntityEventProcessor: process event
GameController ..> UserInterface: render
GameController ..> GameRepository: uses
GameController --> InputHandler
GameController --> CommandType
GameController ..> MapDirector: generate map

EntityEventProcessor ..> CombatSystem
EntityEventProcessor ..> MovementSystem
EntityEventProcessor ..> LevelSystem

GameState o--> GameMap
GameState o--> Player
GameState o--> Mob
GameState ..> AbstractMobFactory

MovementSystem o--> GameMap
MovementSystem --> Direction
MovementSystem --> Entity
LevelSystem o--> Entity
CombatSystem --> Entity

GameMap <-- MapBuilder
GameMap <-- MapRepository
GameMap o--> Tile

Mob o--> MobBehaviorStrategy
MobBehaviorStrategy <|.. NeutralMobBehaviorStrategy
MobBehaviorStrategy <|.. AggressiveMobBehaviorStrategy
MobBehaviorStrategy <|.. PassiveMobBehaviorStrategy

Mob <|--* MobBaseDecorator
MobBaseDecorator <|-- ConfusedMobDecorator

GameRepository --> ProfileData

EquippableItem --> EquipSlot

MapDirector --> MapBuilder
DefaultMapBuilder ..|> MapBuilder
BossMapBuilder ..|> MapBuilder
MapBuilder ..> AbstractEquipmentFactory

DefaultEquipmentFactory ..|> AbstractEquipmentFactory
LegendaryEquipmentFactory ..|> AbstractEquipmentFactory
MysticEquipmentFactory ..|> AbstractEquipmentFactory
AbstractEquipmentFactory --> EquippableItem

HotBiomMobFactory ..|> AbstractMobFactory
ColdBiomMObFactory ..|> AbstractMobFactory
AbstractMobFactory --> Mob

@enduml